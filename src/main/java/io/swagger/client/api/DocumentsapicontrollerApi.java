/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Annotation;
import io.swagger.client.model.DigitalObject;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Text;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsapicontrollerApi {
    private ApiClient apiClient;

    public DocumentsapicontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsapicontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for documentsDeleteUsingDELETE */
    private com.squareup.okhttp.Call documentsDeleteUsingDELETECall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsDeleteUsingDELETEValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = documentsDeleteUsingDELETECall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsDelete
     * Remove all existing &#x60;Document&#x60;s. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsDeleteUsingDELETE() throws ApiException {
        documentsDeleteUsingDELETEWithHttpInfo();
    }

    /**
     * documentsDelete
     * Remove all existing &#x60;Document&#x60;s. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsDeleteUsingDELETEWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = documentsDeleteUsingDELETEValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * documentsDelete (asynchronously)
     * Remove all existing &#x60;Document&#x60;s. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsDeleteUsingDELETEAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsDeleteUsingDELETEValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for documentsGetUsingGET */
    private com.squareup.okhttp.Call documentsGetUsingGETCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsGetUsingGETValidateBeforeCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = documentsGetUsingGETCall(size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsGet
     * Returns a list of &#x60;Documents&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Reference> documentsGetUsingGET(Double size, String offset) throws ApiException {
        ApiResponse<List<Reference>> resp = documentsGetUsingGETWithHttpInfo(size, offset);
        return resp.getData();
    }

    /**
     * documentsGet
     * Returns a list of &#x60;Documents&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Reference>> documentsGetUsingGETWithHttpInfo(Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = documentsGetUsingGETValidateBeforeCall(size, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsGet (asynchronously)
     * Returns a list of &#x60;Documents&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsGetUsingGETAsync(Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsGetUsingGETValidateBeforeCall(size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdAnnotationsAidDeleteUsingDELETE */
    private com.squareup.okhttp.Call documentsIdAnnotationsAidDeleteUsingDELETECall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdAnnotationsAidDeleteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling documentsIdAnnotationsAidDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidDeleteUsingDELETECall(id, aid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdAnnotationsAidDelete
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsIdAnnotationsAidDeleteUsingDELETE(String id, String aid) throws ApiException {
        documentsIdAnnotationsAidDeleteUsingDELETEWithHttpInfo(id, aid);
    }

    /**
     * documentsIdAnnotationsAidDelete
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsIdAnnotationsAidDeleteUsingDELETEWithHttpInfo(String id, String aid) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(id, aid, null, null);
        return apiClient.execute(call);
    }

    /**
     * documentsIdAnnotationsAidDelete (asynchronously)
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdAnnotationsAidDeleteUsingDELETEAsync(String id, String aid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(id, aid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for documentsIdAnnotationsAidGetUsingGET */
    private com.squareup.okhttp.Call documentsIdAnnotationsAidGetUsingGETCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdAnnotationsAidGetUsingGETValidateBeforeCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdAnnotationsAidGetUsingGET(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling documentsIdAnnotationsAidGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidGetUsingGETCall(id, aid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdAnnotationsAidGet
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Annotation documentsIdAnnotationsAidGetUsingGET(String id, String aid) throws ApiException {
        ApiResponse<Annotation> resp = documentsIdAnnotationsAidGetUsingGETWithHttpInfo(id, aid);
        return resp.getData();
    }

    /**
     * documentsIdAnnotationsAidGet
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Annotation> documentsIdAnnotationsAidGetUsingGETWithHttpInfo(String id, String aid) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidGetUsingGETValidateBeforeCall(id, aid, null, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdAnnotationsAidGet (asynchronously)
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdAnnotationsAidGetUsingGETAsync(String id, String aid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdAnnotationsAidGetUsingGETValidateBeforeCall(id, aid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdAnnotationsAidPostUsingPOST */
    private com.squareup.okhttp.Call documentsIdAnnotationsAidPostUsingPOSTCall(String id, String aid, Annotation annotation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(String id, String aid, Annotation annotation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling documentsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling documentsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidPostUsingPOSTCall(id, aid, annotation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdAnnotationsAidPost
     * Create a new &#x60;Annotation&#x60; for &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference documentsIdAnnotationsAidPostUsingPOST(String id, String aid, Annotation annotation) throws ApiException {
        ApiResponse<Reference> resp = documentsIdAnnotationsAidPostUsingPOSTWithHttpInfo(id, aid, annotation);
        return resp.getData();
    }

    /**
     * documentsIdAnnotationsAidPost
     * Create a new &#x60;Annotation&#x60; for &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> documentsIdAnnotationsAidPostUsingPOSTWithHttpInfo(String id, String aid, Annotation annotation) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(id, aid, annotation, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdAnnotationsAidPost (asynchronously)
     * Create a new &#x60;Annotation&#x60; for &#x60;Document&#x60;. 
     * @param id document identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdAnnotationsAidPostUsingPOSTAsync(String id, String aid, Annotation annotation, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(id, aid, annotation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdAnnotationsDeleteUsingDELETE */
    private com.squareup.okhttp.Call documentsIdAnnotationsDeleteUsingDELETECall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/annotations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdAnnotationsDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdAnnotationsDeleteUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdAnnotationsDelete
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsIdAnnotationsDeleteUsingDELETE(String id) throws ApiException {
        documentsIdAnnotationsDeleteUsingDELETEWithHttpInfo(id);
    }

    /**
     * documentsIdAnnotationsDelete
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsIdAnnotationsDeleteUsingDELETEWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * documentsIdAnnotationsDelete (asynchronously)
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdAnnotationsDeleteUsingDELETEAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for documentsIdAnnotationsGetUsingGET */
    private com.squareup.okhttp.Call documentsIdAnnotationsGetUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/annotations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdAnnotationsGetUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdAnnotationsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdAnnotationsGetUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdAnnotationsGet
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> documentsIdAnnotationsGetUsingGET(String id) throws ApiException {
        ApiResponse<List<String>> resp = documentsIdAnnotationsGetUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * documentsIdAnnotationsGet
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> documentsIdAnnotationsGetUsingGETWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdAnnotationsGetUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdAnnotationsGet (asynchronously)
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdAnnotationsGetUsingGETAsync(String id, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdAnnotationsGetUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdDeleteUsingDELETE */
    private com.squareup.okhttp.Call documentsIdDeleteUsingDELETECall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdDeleteUsingDELETEValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdDeleteUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdDelete
     * Remove an existing &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsIdDeleteUsingDELETE(String id) throws ApiException {
        documentsIdDeleteUsingDELETEWithHttpInfo(id);
    }

    /**
     * documentsIdDelete
     * Remove an existing &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsIdDeleteUsingDELETEWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdDeleteUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * documentsIdDelete (asynchronously)
     * Remove an existing &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdDeleteUsingDELETEAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdDeleteUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for documentsIdDomainsGetUsingGET */
    private com.squareup.okhttp.Call documentsIdDomainsGetUsingGETCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/domains".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdDomainsGetUsingGETValidateBeforeCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdDomainsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdDomainsGetUsingGETCall(id, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdDomainsGet
     * Returns the list of &#x60;Domain&#x60;s where the&#x60;Document&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference documentsIdDomainsGetUsingGET(String id, Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = documentsIdDomainsGetUsingGETWithHttpInfo(id, size, offset);
        return resp.getData();
    }

    /**
     * documentsIdDomainsGet
     * Returns the list of &#x60;Domain&#x60;s where the&#x60;Document&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> documentsIdDomainsGetUsingGETWithHttpInfo(String id, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdDomainsGetUsingGETValidateBeforeCall(id, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdDomainsGet (asynchronously)
     * Returns the list of &#x60;Domain&#x60;s where the&#x60;Document&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdDomainsGetUsingGETAsync(String id, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdDomainsGetUsingGETValidateBeforeCall(id, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdGetUsingGET */
    private com.squareup.okhttp.Call documentsIdGetUsingGETCall(String id, Boolean content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (content != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "content", content));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdGetUsingGETValidateBeforeCall(String id, Boolean content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdGetUsingGETCall(id, content, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdGet
     * Returns a single &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @return DigitalObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DigitalObject documentsIdGetUsingGET(String id, Boolean content) throws ApiException {
        ApiResponse<DigitalObject> resp = documentsIdGetUsingGETWithHttpInfo(id, content);
        return resp.getData();
    }

    /**
     * documentsIdGet
     * Returns a single &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @return ApiResponse&lt;DigitalObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DigitalObject> documentsIdGetUsingGETWithHttpInfo(String id, Boolean content) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdGetUsingGETValidateBeforeCall(id, content, null, null);
        Type localVarReturnType = new TypeToken<DigitalObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdGet (asynchronously)
     * Returns a single &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdGetUsingGETAsync(String id, Boolean content, final ApiCallback<DigitalObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdGetUsingGETValidateBeforeCall(id, content, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DigitalObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdPartsDeleteUsingDELETE */
    private com.squareup.okhttp.Call documentsIdPartsDeleteUsingDELETECall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/parts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdPartsDeleteUsingDELETEValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdPartsDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdPartsDeleteUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdPartsDelete
     * Remove all &#x60;Part&#x60;s of &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void documentsIdPartsDeleteUsingDELETE(String id) throws ApiException {
        documentsIdPartsDeleteUsingDELETEWithHttpInfo(id);
    }

    /**
     * documentsIdPartsDelete
     * Remove all &#x60;Part&#x60;s of &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> documentsIdPartsDeleteUsingDELETEWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdPartsDeleteUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * documentsIdPartsDelete (asynchronously)
     * Remove all &#x60;Part&#x60;s of &#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdPartsDeleteUsingDELETEAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdPartsDeleteUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for documentsIdPartsGetUsingGET */
    private com.squareup.okhttp.Call documentsIdPartsGetUsingGETCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/parts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdPartsGetUsingGETValidateBeforeCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdPartsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdPartsGetUsingGETCall(id, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdPartsGet
     * Returns the list of &#x60;Part&#x60;s contained in the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Reference> documentsIdPartsGetUsingGET(String id, Double size, String offset) throws ApiException {
        ApiResponse<List<Reference>> resp = documentsIdPartsGetUsingGETWithHttpInfo(id, size, offset);
        return resp.getData();
    }

    /**
     * documentsIdPartsGet
     * Returns the list of &#x60;Part&#x60;s contained in the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Reference>> documentsIdPartsGetUsingGETWithHttpInfo(String id, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdPartsGetUsingGETValidateBeforeCall(id, size, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdPartsGet (asynchronously)
     * Returns the list of &#x60;Part&#x60;s contained in the&#x60;Document&#x60;. 
     * @param id identifier (required)
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdPartsGetUsingGETAsync(String id, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdPartsGetUsingGETValidateBeforeCall(id, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdPartsIdPostUsingPOST */
    private com.squareup.okhttp.Call documentsIdPartsIdPostUsingPOSTCall(String id, String partId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/documents/{id}/parts/{partId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "partId" + "\\}", apiClient.escapeString(partId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdPartsIdPostUsingPOSTValidateBeforeCall(String id, String partId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdPartsIdPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'partId' is set
        if (partId == null) {
            throw new ApiException("Missing the required parameter 'partId' when calling documentsIdPartsIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdPartsIdPostUsingPOSTCall(id, partId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdPartsIdPost
     * Add a &#x60;Part&#x60; in a &#x60;Document&#x60;
     * @param id document identifier (required)
     * @param partId part identifier (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference documentsIdPartsIdPostUsingPOST(String id, String partId) throws ApiException {
        ApiResponse<Reference> resp = documentsIdPartsIdPostUsingPOSTWithHttpInfo(id, partId);
        return resp.getData();
    }

    /**
     * documentsIdPartsIdPost
     * Add a &#x60;Part&#x60; in a &#x60;Document&#x60;
     * @param id document identifier (required)
     * @param partId part identifier (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> documentsIdPartsIdPostUsingPOSTWithHttpInfo(String id, String partId) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdPartsIdPostUsingPOSTValidateBeforeCall(id, partId, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdPartsIdPost (asynchronously)
     * Add a &#x60;Part&#x60; in a &#x60;Document&#x60;
     * @param id document identifier (required)
     * @param partId part identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdPartsIdPostUsingPOSTAsync(String id, String partId, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdPartsIdPostUsingPOSTValidateBeforeCall(id, partId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsIdPostUsingPOST */
    private com.squareup.okhttp.Call documentsIdPostUsingPOSTCall(String id, Text document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = document;
        
        // create path and map variables
        String localVarPath = "/documents/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsIdPostUsingPOSTValidateBeforeCall(String id, Text document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentsIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsIdPostUsingPOSTCall(id, document, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsIdPost
     * Create a new &#x60;Document&#x60; by id. 
     * @param id identifier (required)
     * @param document text (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference documentsIdPostUsingPOST(String id, Text document) throws ApiException {
        ApiResponse<Reference> resp = documentsIdPostUsingPOSTWithHttpInfo(id, document);
        return resp.getData();
    }

    /**
     * documentsIdPost
     * Create a new &#x60;Document&#x60; by id. 
     * @param id identifier (required)
     * @param document text (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> documentsIdPostUsingPOSTWithHttpInfo(String id, Text document) throws ApiException {
        com.squareup.okhttp.Call call = documentsIdPostUsingPOSTValidateBeforeCall(id, document, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsIdPost (asynchronously)
     * Create a new &#x60;Document&#x60; by id. 
     * @param id identifier (required)
     * @param document text (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsIdPostUsingPOSTAsync(String id, Text document, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsIdPostUsingPOSTValidateBeforeCall(id, document, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for documentsPostUsingPOST */
    private com.squareup.okhttp.Call documentsPostUsingPOSTCall(Text document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = document;
        
        // create path and map variables
        String localVarPath = "/documents".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentsPostUsingPOSTValidateBeforeCall(Text document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling documentsPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = documentsPostUsingPOSTCall(document, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * documentsPost
     * Create a new &#x60;Document&#x60;. 
     * @param document text (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference documentsPostUsingPOST(Text document) throws ApiException {
        ApiResponse<Reference> resp = documentsPostUsingPOSTWithHttpInfo(document);
        return resp.getData();
    }

    /**
     * documentsPost
     * Create a new &#x60;Document&#x60;. 
     * @param document text (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> documentsPostUsingPOSTWithHttpInfo(Text document) throws ApiException {
        com.squareup.okhttp.Call call = documentsPostUsingPOSTValidateBeforeCall(document, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * documentsPost (asynchronously)
     * Create a new &#x60;Document&#x60;. 
     * @param document text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentsPostUsingPOSTAsync(Text document, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentsPostUsingPOSTValidateBeforeCall(document, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
