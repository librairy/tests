/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Annotation;
import io.swagger.client.model.DigitalObject;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Text;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PartsapicontrollerApi {
    private ApiClient apiClient;

    public PartsapicontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PartsapicontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for partsDeleteUsingDELETE */
    private com.squareup.okhttp.Call partsDeleteUsingDELETECall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsDeleteUsingDELETEValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = partsDeleteUsingDELETECall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsDelete
     * Remove all existing &#x60;Part&#x60;s. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void partsDeleteUsingDELETE() throws ApiException {
        partsDeleteUsingDELETEWithHttpInfo();
    }

    /**
     * partsDelete
     * Remove all existing &#x60;Part&#x60;s. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> partsDeleteUsingDELETEWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = partsDeleteUsingDELETEValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * partsDelete (asynchronously)
     * Remove all existing &#x60;Part&#x60;s. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsDeleteUsingDELETEAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsDeleteUsingDELETEValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for partsGetUsingGET */
    private com.squareup.okhttp.Call partsGetUsingGETCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsGetUsingGETValidateBeforeCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = partsGetUsingGETCall(size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsGet
     * Returns a list of &#x60;Parts&#x60;. 
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Reference> partsGetUsingGET(Double size, String offset) throws ApiException {
        ApiResponse<List<Reference>> resp = partsGetUsingGETWithHttpInfo(size, offset);
        return resp.getData();
    }

    /**
     * partsGet
     * Returns a list of &#x60;Parts&#x60;. 
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Reference>> partsGetUsingGETWithHttpInfo(Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = partsGetUsingGETValidateBeforeCall(size, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Reference>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsGet (asynchronously)
     * Returns a list of &#x60;Parts&#x60;. 
     * @param size number of parts (optional, default to 100)
     * @param offset id of the first part (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsGetUsingGETAsync(Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsGetUsingGETValidateBeforeCall(size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdAnnotationsAidDeleteUsingDELETE */
    private com.squareup.okhttp.Call partsIdAnnotationsAidDeleteUsingDELETECall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdAnnotationsAidDeleteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling partsIdAnnotationsAidDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdAnnotationsAidDeleteUsingDELETECall(id, aid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdAnnotationsAidDelete
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void partsIdAnnotationsAidDeleteUsingDELETE(String id, String aid) throws ApiException {
        partsIdAnnotationsAidDeleteUsingDELETEWithHttpInfo(id, aid);
    }

    /**
     * partsIdAnnotationsAidDelete
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> partsIdAnnotationsAidDeleteUsingDELETEWithHttpInfo(String id, String aid) throws ApiException {
        com.squareup.okhttp.Call call = partsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(id, aid, null, null);
        return apiClient.execute(call);
    }

    /**
     * partsIdAnnotationsAidDelete (asynchronously)
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdAnnotationsAidDeleteUsingDELETEAsync(String id, String aid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdAnnotationsAidDeleteUsingDELETEValidateBeforeCall(id, aid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for partsIdAnnotationsAidGetUsingGET */
    private com.squareup.okhttp.Call partsIdAnnotationsAidGetUsingGETCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdAnnotationsAidGetUsingGETValidateBeforeCall(String id, String aid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdAnnotationsAidGetUsingGET(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling partsIdAnnotationsAidGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdAnnotationsAidGetUsingGETCall(id, aid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdAnnotationsAidGet
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Annotation partsIdAnnotationsAidGetUsingGET(String id, String aid) throws ApiException {
        ApiResponse<Annotation> resp = partsIdAnnotationsAidGetUsingGETWithHttpInfo(id, aid);
        return resp.getData();
    }

    /**
     * partsIdAnnotationsAidGet
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Annotation> partsIdAnnotationsAidGetUsingGETWithHttpInfo(String id, String aid) throws ApiException {
        com.squareup.okhttp.Call call = partsIdAnnotationsAidGetUsingGETValidateBeforeCall(id, aid, null, null);
        Type localVarReturnType = new TypeToken<Annotation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdAnnotationsAidGet (asynchronously)
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdAnnotationsAidGetUsingGETAsync(String id, String aid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdAnnotationsAidGetUsingGETValidateBeforeCall(id, aid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdAnnotationsAidPostUsingPOST */
    private com.squareup.okhttp.Call partsIdAnnotationsAidPostUsingPOSTCall(String id, String aid, Annotation annotation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annotation;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/annotations/{aid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "aid" + "\\}", apiClient.escapeString(aid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(String id, String aid, Annotation annotation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'aid' is set
        if (aid == null) {
            throw new ApiException("Missing the required parameter 'aid' when calling partsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'annotation' is set
        if (annotation == null) {
            throw new ApiException("Missing the required parameter 'annotation' when calling partsIdAnnotationsAidPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdAnnotationsAidPostUsingPOSTCall(id, aid, annotation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdAnnotationsAidPost
     * Create a new &#x60;Annotation&#x60; for &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference partsIdAnnotationsAidPostUsingPOST(String id, String aid, Annotation annotation) throws ApiException {
        ApiResponse<Reference> resp = partsIdAnnotationsAidPostUsingPOSTWithHttpInfo(id, aid, annotation);
        return resp.getData();
    }

    /**
     * partsIdAnnotationsAidPost
     * Create a new &#x60;Annotation&#x60; for &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> partsIdAnnotationsAidPostUsingPOSTWithHttpInfo(String id, String aid, Annotation annotation) throws ApiException {
        com.squareup.okhttp.Call call = partsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(id, aid, annotation, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdAnnotationsAidPost (asynchronously)
     * Create a new &#x60;Annotation&#x60; for &#x60;Part&#x60;. 
     * @param id part identifier (required)
     * @param aid annotation identifier (required)
     * @param annotation annotation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdAnnotationsAidPostUsingPOSTAsync(String id, String aid, Annotation annotation, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdAnnotationsAidPostUsingPOSTValidateBeforeCall(id, aid, annotation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdAnnotationsDeleteUsingDELETE */
    private com.squareup.okhttp.Call partsIdAnnotationsDeleteUsingDELETECall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/annotations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdAnnotationsDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdAnnotationsDeleteUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdAnnotationsDelete
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void partsIdAnnotationsDeleteUsingDELETE(String id) throws ApiException {
        partsIdAnnotationsDeleteUsingDELETEWithHttpInfo(id);
    }

    /**
     * partsIdAnnotationsDelete
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> partsIdAnnotationsDeleteUsingDELETEWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = partsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * partsIdAnnotationsDelete (asynchronously)
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdAnnotationsDeleteUsingDELETEAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdAnnotationsDeleteUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for partsIdAnnotationsGetUsingGET */
    private com.squareup.okhttp.Call partsIdAnnotationsGetUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/annotations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdAnnotationsGetUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdAnnotationsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdAnnotationsGetUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdAnnotationsGet
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Part&#x60;. 
     * @param id identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> partsIdAnnotationsGetUsingGET(String id) throws ApiException {
        ApiResponse<List<String>> resp = partsIdAnnotationsGetUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * partsIdAnnotationsGet
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Part&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> partsIdAnnotationsGetUsingGETWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = partsIdAnnotationsGetUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdAnnotationsGet (asynchronously)
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdAnnotationsGetUsingGETAsync(String id, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdAnnotationsGetUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdDeleteUsingDELETE */
    private com.squareup.okhttp.Call partsIdDeleteUsingDELETECall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdDeleteUsingDELETEValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdDeleteUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdDelete
     * Remove an existing &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void partsIdDeleteUsingDELETE(String id) throws ApiException {
        partsIdDeleteUsingDELETEWithHttpInfo(id);
    }

    /**
     * partsIdDelete
     * Remove an existing &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> partsIdDeleteUsingDELETEWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = partsIdDeleteUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * partsIdDelete (asynchronously)
     * Remove an existing &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdDeleteUsingDELETEAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdDeleteUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for partsIdDocumentsGetUsingGET */
    private com.squareup.okhttp.Call partsIdDocumentsGetUsingGETCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/documents".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdDocumentsGetUsingGETValidateBeforeCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdDocumentsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdDocumentsGetUsingGETCall(id, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdDocumentsGet
     * Returns the list of &#x60;Document&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of documents (optional, default to 100)
     * @param offset id of the first document (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference partsIdDocumentsGetUsingGET(String id, Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = partsIdDocumentsGetUsingGETWithHttpInfo(id, size, offset);
        return resp.getData();
    }

    /**
     * partsIdDocumentsGet
     * Returns the list of &#x60;Document&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of documents (optional, default to 100)
     * @param offset id of the first document (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> partsIdDocumentsGetUsingGETWithHttpInfo(String id, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = partsIdDocumentsGetUsingGETValidateBeforeCall(id, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdDocumentsGet (asynchronously)
     * Returns the list of &#x60;Document&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of documents (optional, default to 100)
     * @param offset id of the first document (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdDocumentsGetUsingGETAsync(String id, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdDocumentsGetUsingGETValidateBeforeCall(id, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdDomainsGetUsingGET */
    private com.squareup.okhttp.Call partsIdDomainsGetUsingGETCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}/domains".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdDomainsGetUsingGETValidateBeforeCall(String id, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdDomainsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdDomainsGetUsingGETCall(id, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdDomainsGet
     * Returns the list of &#x60;Domain&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference partsIdDomainsGetUsingGET(String id, Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = partsIdDomainsGetUsingGETWithHttpInfo(id, size, offset);
        return resp.getData();
    }

    /**
     * partsIdDomainsGet
     * Returns the list of &#x60;Domain&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> partsIdDomainsGetUsingGETWithHttpInfo(String id, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = partsIdDomainsGetUsingGETValidateBeforeCall(id, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdDomainsGet (asynchronously)
     * Returns the list of &#x60;Domain&#x60;s where the &#x60;Part&#x60; is contained. 
     * @param id identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdDomainsGetUsingGETAsync(String id, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdDomainsGetUsingGETValidateBeforeCall(id, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdGetUsingGET */
    private com.squareup.okhttp.Call partsIdGetUsingGETCall(String id, Boolean content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/parts/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (content != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "content", content));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdGetUsingGETValidateBeforeCall(String id, Boolean content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdGetUsingGETCall(id, content, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdGet
     * Returns a single &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @return DigitalObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DigitalObject partsIdGetUsingGET(String id, Boolean content) throws ApiException {
        ApiResponse<DigitalObject> resp = partsIdGetUsingGETWithHttpInfo(id, content);
        return resp.getData();
    }

    /**
     * partsIdGet
     * Returns a single &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @return ApiResponse&lt;DigitalObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DigitalObject> partsIdGetUsingGETWithHttpInfo(String id, Boolean content) throws ApiException {
        com.squareup.okhttp.Call call = partsIdGetUsingGETValidateBeforeCall(id, content, null, null);
        Type localVarReturnType = new TypeToken<DigitalObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdGet (asynchronously)
     * Returns a single &#x60;Part&#x60;. 
     * @param id identifier (required)
     * @param content return text (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdGetUsingGETAsync(String id, Boolean content, final ApiCallback<DigitalObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdGetUsingGETValidateBeforeCall(id, content, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DigitalObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsIdPostUsingPOST */
    private com.squareup.okhttp.Call partsIdPostUsingPOSTCall(String id, Text text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = text;
        
        // create path and map variables
        String localVarPath = "/parts/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsIdPostUsingPOSTValidateBeforeCall(String id, Text text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partsIdPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling partsIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsIdPostUsingPOSTCall(id, text, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsIdPost
     * Create a new &#x60;Part&#x60; by id. 
     * @param id identifier (required)
     * @param text text (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference partsIdPostUsingPOST(String id, Text text) throws ApiException {
        ApiResponse<Reference> resp = partsIdPostUsingPOSTWithHttpInfo(id, text);
        return resp.getData();
    }

    /**
     * partsIdPost
     * Create a new &#x60;Part&#x60; by id. 
     * @param id identifier (required)
     * @param text text (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> partsIdPostUsingPOSTWithHttpInfo(String id, Text text) throws ApiException {
        com.squareup.okhttp.Call call = partsIdPostUsingPOSTValidateBeforeCall(id, text, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsIdPost (asynchronously)
     * Create a new &#x60;Part&#x60; by id. 
     * @param id identifier (required)
     * @param text text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsIdPostUsingPOSTAsync(String id, Text text, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsIdPostUsingPOSTValidateBeforeCall(id, text, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for partsPostUsingPOST */
    private com.squareup.okhttp.Call partsPostUsingPOSTCall(Text text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = text;
        
        // create path and map variables
        String localVarPath = "/parts".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partsPostUsingPOSTValidateBeforeCall(Text text, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling partsPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = partsPostUsingPOSTCall(text, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * partsPost
     * Create a new &#x60;Part&#x60;. 
     * @param text text (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference partsPostUsingPOST(Text text) throws ApiException {
        ApiResponse<Reference> resp = partsPostUsingPOSTWithHttpInfo(text);
        return resp.getData();
    }

    /**
     * partsPost
     * Create a new &#x60;Part&#x60;. 
     * @param text text (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> partsPostUsingPOSTWithHttpInfo(Text text) throws ApiException {
        com.squareup.okhttp.Call call = partsPostUsingPOSTValidateBeforeCall(text, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * partsPost (asynchronously)
     * Create a new &#x60;Part&#x60;. 
     * @param text text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partsPostUsingPOSTAsync(Text text, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partsPostUsingPOSTValidateBeforeCall(text, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
