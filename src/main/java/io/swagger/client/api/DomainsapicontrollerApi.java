/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContainerStats;
import io.swagger.client.model.Domain;
import io.swagger.client.model.Parameter;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Relation;
import io.swagger.client.model.Resource;
import io.swagger.client.model.Score;
import io.swagger.client.model.Tag;
import io.swagger.client.model.Text;
import io.swagger.client.model.Topic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsapicontrollerApi {
    private ApiClient apiClient;

    public DomainsapicontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsapicontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for domainsDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDeleteUsingDELETECall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDeleteUsingDELETEValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = domainsDeleteUsingDELETECall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDelete
     * Remove all &#x60;Domain&#x60;s. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDeleteUsingDELETE() throws ApiException {
        domainsDeleteUsingDELETEWithHttpInfo();
    }

    /**
     * domainsDelete
     * Remove all &#x60;Domain&#x60;s. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDeleteUsingDELETEWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = domainsDeleteUsingDELETEValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDelete (asynchronously)
     * Remove all &#x60;Domain&#x60;s. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDeleteUsingDELETEAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDeleteUsingDELETEValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDomainIdDeleteUsingDELETECall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDeleteUsingDELETEValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDeleteUsingDELETECall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDelete
     * Remove a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdDeleteUsingDELETE(String domainId) throws ApiException {
        domainsDomainIdDeleteUsingDELETEWithHttpInfo(domainId);
    }

    /**
     * domainsDomainIdDelete
     * Remove a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdDeleteUsingDELETEWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDeleteUsingDELETEValidateBeforeCall(domainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdDelete (asynchronously)
     * Remove a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDeleteUsingDELETEAsync(String domainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDeleteUsingDELETEValidateBeforeCall(domainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDeleteUsingDELETECall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDeleteUsingDELETEValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDeleteUsingDELETECall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDelete
     * Remove all &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdDocumentsDeleteUsingDELETE(String domainId) throws ApiException {
        domainsDomainIdDocumentsDeleteUsingDELETEWithHttpInfo(domainId);
    }

    /**
     * domainsDomainIdDocumentsDelete
     * Remove all &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdDocumentsDeleteUsingDELETEWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDeleteUsingDELETEValidateBeforeCall(domainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdDocumentsDelete (asynchronously)
     * Remove all &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDeleteUsingDELETEAsync(String domainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDeleteUsingDELETEValidateBeforeCall(domainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDocumentIdDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdDeleteUsingDELETECall(String domainId, String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents/{documentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEValidateBeforeCall(String domainId, String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDocumentIdDeleteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling domainsDomainIdDocumentsDocumentIdDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdDeleteUsingDELETECall(domainId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDocumentIdDelete
     * Remove a &#x60;Document&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdDocumentsDocumentIdDeleteUsingDELETE(String domainId, String documentId) throws ApiException {
        domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEWithHttpInfo(domainId, documentId);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdDelete
     * Remove a &#x60;Document&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEWithHttpInfo(String domainId, String documentId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEValidateBeforeCall(domainId, documentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdDelete (asynchronously)
     * Remove a &#x60;Document&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEAsync(String domainId, String documentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdDeleteUsingDELETEValidateBeforeCall(domainId, documentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDocumentIdPostUsingPOST */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdPostUsingPOSTCall(String domainId, String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents/{documentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdPostUsingPOSTValidateBeforeCall(String domainId, String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDocumentIdPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling domainsDomainIdDocumentsDocumentIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdPostUsingPOSTCall(domainId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDocumentIdPost
     * Add a &#x60;Document&#x60; to &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdDocumentsDocumentIdPostUsingPOST(String domainId, String documentId) throws ApiException {
        domainsDomainIdDocumentsDocumentIdPostUsingPOSTWithHttpInfo(domainId, documentId);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdPost
     * Add a &#x60;Document&#x60; to &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdDocumentsDocumentIdPostUsingPOSTWithHttpInfo(String domainId, String documentId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdPostUsingPOSTValidateBeforeCall(domainId, documentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdPost (asynchronously)
     * Add a &#x60;Document&#x60; to &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdPostUsingPOSTAsync(String domainId, String documentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdPostUsingPOSTValidateBeforeCall(domainId, documentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETCall(String domainId, String documentId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents/{documentId}/relations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resourceType", resourceType));
        if (relatedId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relatedId", relatedId));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETValidateBeforeCall(String domainId, String documentId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETCall(domainId, documentId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDocumentIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Relation> domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET(String domainId, String documentId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        ApiResponse<List<Relation>> resp = domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETWithHttpInfo(domainId, documentId, type, resourceType, relatedId, size, offset);
        return (List<Relation>) resp.getData();
    }

    /**
     * domainsDomainIdDocumentsDocumentIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Relation>> domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETWithHttpInfo(String domainId, String documentId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETValidateBeforeCall(domainId, documentId, type, resourceType, relatedId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdRelationsGet (asynchronously)
     * Return a list of &#x60;Relation&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETAsync(String domainId, String documentId, String type, String resourceType, String relatedId, Double size, String offset, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETValidateBeforeCall(domainId, documentId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDocumentIdTagsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTagsGetUsingGETCall(String domainId, String documentId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents/{documentId}/tags".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTagsGetUsingGETValidateBeforeCall(String domainId, String documentId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDocumentIdTagsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling domainsDomainIdDocumentsDocumentIdTagsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTagsGetUsingGETCall(domainId, documentId, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTagsGet
     * Return a list of &#x60;Tag&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of tags (optional, default to 100)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tag domainsDomainIdDocumentsDocumentIdTagsGetUsingGET(String domainId, String documentId, Double size) throws ApiException {
        ApiResponse<Tag> resp = domainsDomainIdDocumentsDocumentIdTagsGetUsingGETWithHttpInfo(domainId, documentId, size);
        return resp.getData();
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTagsGet
     * Return a list of &#x60;Tag&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of tags (optional, default to 100)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tag> domainsDomainIdDocumentsDocumentIdTagsGetUsingGETWithHttpInfo(String domainId, String documentId, Double size) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTagsGetUsingGETValidateBeforeCall(domainId, documentId, size, null, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTagsGet (asynchronously)
     * Return a list of &#x60;Tag&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of tags (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTagsGetUsingGETAsync(String domainId, String documentId, Double size, final ApiCallback<Tag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTagsGetUsingGETValidateBeforeCall(domainId, documentId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsDocumentIdTopicsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETCall(String domainId, String documentId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents/{documentId}/topics".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (words != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "words", words));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETValidateBeforeCall(String domainId, String documentId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsDocumentIdTopicsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling domainsDomainIdDocumentsDocumentIdTopicsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETCall(domainId, documentId, size, offset, words, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic domainsDomainIdDocumentsDocumentIdTopicsGetUsingGET(String domainId, String documentId, Double size, String offset, Double words) throws ApiException {
        ApiResponse<Topic> resp = domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETWithHttpInfo(domainId, documentId, size, offset, words);
        return resp.getData();
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETWithHttpInfo(String domainId, String documentId, Double size, String offset, Double words) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETValidateBeforeCall(domainId, documentId, size, offset, words, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdDocumentsDocumentIdTopicsGet (asynchronously)
     * Return a list of &#x60;Topic&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param documentId id of document (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETAsync(String domainId, String documentId, Double size, String offset, Double words, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETValidateBeforeCall(domainId, documentId, size, offset, words, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdDocumentsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdDocumentsGetUsingGETCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/documents".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdDocumentsGetUsingGETValidateBeforeCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdDocumentsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsGetUsingGETCall(domainId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdDocumentsGet
     * Return a list of &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsDomainIdDocumentsGetUsingGET(String domainId, Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = domainsDomainIdDocumentsGetUsingGETWithHttpInfo(domainId, size, offset);
        return resp.getData();
    }

    /**
     * domainsDomainIdDocumentsGet
     * Return a list of &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsDomainIdDocumentsGetUsingGETWithHttpInfo(String domainId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdDocumentsGetUsingGETValidateBeforeCall(domainId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdDocumentsGet (asynchronously)
     * Return a list of &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdDocumentsGetUsingGETAsync(String domainId, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdDocumentsGetUsingGETValidateBeforeCall(domainId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdGetUsingGETCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdGetUsingGETValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdGetUsingGETCall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdGet
     * Return a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ContainerStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContainerStats domainsDomainIdGetUsingGET(String domainId) throws ApiException {
        ApiResponse<ContainerStats> resp = domainsDomainIdGetUsingGETWithHttpInfo(domainId);
        return resp.getData();
    }

    /**
     * domainsDomainIdGet
     * Return a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ApiResponse&lt;ContainerStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContainerStats> domainsDomainIdGetUsingGETWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdGetUsingGETValidateBeforeCall(domainId, null, null);
        Type localVarReturnType = new TypeToken<ContainerStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdGet (asynchronously)
     * Return a &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdGetUsingGETAsync(String domainId, final ApiCallback<ContainerStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdGetUsingGETValidateBeforeCall(domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContainerStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdParametersGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdParametersGetUsingGETCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parameters".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdParametersGetUsingGETValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdParametersGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdParametersGetUsingGETCall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdParametersGet
     * Return a list of &#x60;Parameter&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return Parameter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Parameter domainsDomainIdParametersGetUsingGET(String domainId) throws ApiException {
        ApiResponse<Parameter> resp = domainsDomainIdParametersGetUsingGETWithHttpInfo(domainId);
        return resp.getData();
    }

    /**
     * domainsDomainIdParametersGet
     * Return a list of &#x60;Parameter&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ApiResponse&lt;Parameter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Parameter> domainsDomainIdParametersGetUsingGETWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdParametersGetUsingGETValidateBeforeCall(domainId, null, null);
        Type localVarReturnType = new TypeToken<Parameter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdParametersGet (asynchronously)
     * Return a list of &#x60;Parameter&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdParametersGetUsingGETAsync(String domainId, final ApiCallback<Parameter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdParametersGetUsingGETValidateBeforeCall(domainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Parameter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdParametersPostUsingPOST */
    private com.squareup.okhttp.Call domainsDomainIdParametersPostUsingPOSTCall(String domainId, Parameter parameter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameter;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parameters".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdParametersPostUsingPOSTValidateBeforeCall(String domainId, Parameter parameter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdParametersPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'parameter' is set
        if (parameter == null) {
            throw new ApiException("Missing the required parameter 'parameter' when calling domainsDomainIdParametersPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdParametersPostUsingPOSTCall(domainId, parameter, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdParametersPost
     * Add a &#x60;Parameter&#x60; to &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param parameter a pair key/value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdParametersPostUsingPOST(String domainId, Parameter parameter) throws ApiException {
        domainsDomainIdParametersPostUsingPOSTWithHttpInfo(domainId, parameter);
    }

    /**
     * domainsDomainIdParametersPost
     * Add a &#x60;Parameter&#x60; to &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param parameter a pair key/value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdParametersPostUsingPOSTWithHttpInfo(String domainId, Parameter parameter) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdParametersPostUsingPOSTValidateBeforeCall(domainId, parameter, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdParametersPost (asynchronously)
     * Add a &#x60;Parameter&#x60; to &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param parameter a pair key/value (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdParametersPostUsingPOSTAsync(String domainId, Parameter parameter, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdParametersPostUsingPOSTValidateBeforeCall(domainId, parameter, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdPartsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdPartsGetUsingGETCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPartsGetUsingGETValidateBeforeCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPartsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPartsGetUsingGETCall(domainId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPartsGet
     * Return a list of &#x60;Part&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsDomainIdPartsGetUsingGET(String domainId, Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = domainsDomainIdPartsGetUsingGETWithHttpInfo(domainId, size, offset);
        return resp.getData();
    }

    /**
     * domainsDomainIdPartsGet
     * Return a list of &#x60;Part&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsDomainIdPartsGetUsingGETWithHttpInfo(String domainId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPartsGetUsingGETValidateBeforeCall(domainId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPartsGet (asynchronously)
     * Return a list of &#x60;Part&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPartsGetUsingGETAsync(String domainId, Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPartsGetUsingGETValidateBeforeCall(domainId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdPartsPartIdRelationsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdRelationsGetUsingGETCall(String domainId, String partId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parts/{partId}/relations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "partId" + "\\}", apiClient.escapeString(partId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resourceType", resourceType));
        if (relatedId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relatedId", relatedId));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdRelationsGetUsingGETValidateBeforeCall(String domainId, String partId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPartsPartIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'partId' is set
        if (partId == null) {
            throw new ApiException("Missing the required parameter 'partId' when calling domainsDomainIdPartsPartIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling domainsDomainIdPartsPartIdRelationsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdRelationsGetUsingGETCall(domainId, partId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPartsPartIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Relation domainsDomainIdPartsPartIdRelationsGetUsingGET(String domainId, String partId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        ApiResponse<Relation> resp = domainsDomainIdPartsPartIdRelationsGetUsingGETWithHttpInfo(domainId, partId, type, resourceType, relatedId, size, offset);
        return resp.getData();
    }

    /**
     * domainsDomainIdPartsPartIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Relation> domainsDomainIdPartsPartIdRelationsGetUsingGETWithHttpInfo(String domainId, String partId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdRelationsGetUsingGETValidateBeforeCall(domainId, partId, type, resourceType, relatedId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPartsPartIdRelationsGet (asynchronously)
     * Return a list of &#x60;Relation&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related document (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPartsPartIdRelationsGetUsingGETAsync(String domainId, String partId, String type, String resourceType, String relatedId, Double size, String offset, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdRelationsGetUsingGETValidateBeforeCall(domainId, partId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdPartsPartIdTagsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdTagsGetUsingGETCall(String domainId, String partId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parts/{partId}/tags".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "partId" + "\\}", apiClient.escapeString(partId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdTagsGetUsingGETValidateBeforeCall(String domainId, String partId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPartsPartIdTagsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'partId' is set
        if (partId == null) {
            throw new ApiException("Missing the required parameter 'partId' when calling domainsDomainIdPartsPartIdTagsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTagsGetUsingGETCall(domainId, partId, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPartsPartIdTagsGet
     * Return a list of &#x60;Tag&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of tags (optional, default to 100)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tag domainsDomainIdPartsPartIdTagsGetUsingGET(String domainId, String partId, Double size) throws ApiException {
        ApiResponse<Tag> resp = domainsDomainIdPartsPartIdTagsGetUsingGETWithHttpInfo(domainId, partId, size);
        return resp.getData();
    }

    /**
     * domainsDomainIdPartsPartIdTagsGet
     * Return a list of &#x60;Tag&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of tags (optional, default to 100)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tag> domainsDomainIdPartsPartIdTagsGetUsingGETWithHttpInfo(String domainId, String partId, Double size) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTagsGetUsingGETValidateBeforeCall(domainId, partId, size, null, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPartsPartIdTagsGet (asynchronously)
     * Return a list of &#x60;Tag&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of tags (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPartsPartIdTagsGetUsingGETAsync(String domainId, String partId, Double size, final ApiCallback<Tag> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTagsGetUsingGETValidateBeforeCall(domainId, partId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdPartsPartIdTopicsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdTopicsGetUsingGETCall(String domainId, String partId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/parts/{partId}/topics".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "partId" + "\\}", apiClient.escapeString(partId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (words != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "words", words));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPartsPartIdTopicsGetUsingGETValidateBeforeCall(String domainId, String partId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPartsPartIdTopicsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'partId' is set
        if (partId == null) {
            throw new ApiException("Missing the required parameter 'partId' when calling domainsDomainIdPartsPartIdTopicsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTopicsGetUsingGETCall(domainId, partId, size, offset, words, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPartsPartIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic domainsDomainIdPartsPartIdTopicsGetUsingGET(String domainId, String partId, Double size, String offset, Double words) throws ApiException {
        ApiResponse<Topic> resp = domainsDomainIdPartsPartIdTopicsGetUsingGETWithHttpInfo(domainId, partId, size, offset, words);
        return resp.getData();
    }

    /**
     * domainsDomainIdPartsPartIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> domainsDomainIdPartsPartIdTopicsGetUsingGETWithHttpInfo(String domainId, String partId, Double size, String offset, Double words) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTopicsGetUsingGETValidateBeforeCall(domainId, partId, size, offset, words, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPartsPartIdTopicsGet (asynchronously)
     * Return a list of &#x60;Topic&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param partId id of part (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first topic (optional)
     * @param words words per topic (optional, default to 50)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPartsPartIdTopicsGetUsingGETAsync(String domainId, String partId, Double size, String offset, Double words, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPartsPartIdTopicsGetUsingGETValidateBeforeCall(domainId, partId, size, offset, words, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdPathsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdPathsGetUsingGETCall(String domainId, String startId, String endId, String type, Double lenght, Double threshold, Double size, String resources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/paths".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startId", startId));
        if (endId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endId", endId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (lenght != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lenght", lenght));
        if (threshold != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "threshold", threshold));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (resources != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resources", resources));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPathsGetUsingGETValidateBeforeCall(String domainId, String startId, String endId, String type, Double lenght, Double threshold, Double size, String resources, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPathsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'startId' is set
        if (startId == null) {
            throw new ApiException("Missing the required parameter 'startId' when calling domainsDomainIdPathsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'endId' is set
        if (endId == null) {
            throw new ApiException("Missing the required parameter 'endId' when calling domainsDomainIdPathsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling domainsDomainIdPathsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPathsGetUsingGETCall(domainId, startId, endId, type, lenght, threshold, size, resources, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPathsGet
     * Return a path of &#x60;Document&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param startId start document (required)
     * @param endId end document (required)
     * @param type type of relation (required)
     * @param lenght max length (optional, default to 10)
     * @param threshold min score (optional, default to 0.7)
     * @param size max paths (optional, default to 5)
     * @param resources type of resources (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsDomainIdPathsGetUsingGET(String domainId, String startId, String endId, String type, Double lenght, Double threshold, Double size, String resources) throws ApiException {
        ApiResponse<Reference> resp = domainsDomainIdPathsGetUsingGETWithHttpInfo(domainId, startId, endId, type, lenght, threshold, size, resources);
        return resp.getData();
    }

    /**
     * domainsDomainIdPathsGet
     * Return a path of &#x60;Document&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param startId start document (required)
     * @param endId end document (required)
     * @param type type of relation (required)
     * @param lenght max length (optional, default to 10)
     * @param threshold min score (optional, default to 0.7)
     * @param size max paths (optional, default to 5)
     * @param resources type of resources (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsDomainIdPathsGetUsingGETWithHttpInfo(String domainId, String startId, String endId, String type, Double lenght, Double threshold, Double size, String resources) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPathsGetUsingGETValidateBeforeCall(domainId, startId, endId, type, lenght, threshold, size, resources, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPathsGet (asynchronously)
     * Return a path of &#x60;Document&#x60;s in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param startId start document (required)
     * @param endId end document (required)
     * @param type type of relation (required)
     * @param lenght max length (optional, default to 10)
     * @param threshold min score (optional, default to 0.7)
     * @param size max paths (optional, default to 5)
     * @param resources type of resources (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPathsGetUsingGETAsync(String domainId, String startId, String endId, String type, Double lenght, Double threshold, Double size, String resources, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPathsGetUsingGETValidateBeforeCall(domainId, startId, endId, type, lenght, threshold, size, resources, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdPostUsingPOST */
    private com.squareup.okhttp.Call domainsDomainIdPostUsingPOSTCall(String domainId, Resource domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = domain;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdPostUsingPOSTValidateBeforeCall(String domainId, Resource domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling domainsDomainIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdPostUsingPOSTCall(domainId, domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdPost
     * Create a new &#x60;Domain&#x60; by id 
     * @param domainId identifier (required)
     * @param domain a container of documents (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsDomainIdPostUsingPOST(String domainId, Resource domain) throws ApiException {
        ApiResponse<Reference> resp = domainsDomainIdPostUsingPOSTWithHttpInfo(domainId, domain);
        return resp.getData();
    }

    /**
     * domainsDomainIdPost
     * Create a new &#x60;Domain&#x60; by id 
     * @param domainId identifier (required)
     * @param domain a container of documents (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsDomainIdPostUsingPOSTWithHttpInfo(String domainId, Resource domain) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdPostUsingPOSTValidateBeforeCall(domainId, domain, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdPost (asynchronously)
     * Create a new &#x60;Domain&#x60; by id 
     * @param domainId identifier (required)
     * @param domain a container of documents (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdPostUsingPOSTAsync(String domainId, Resource domain, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdPostUsingPOSTValidateBeforeCall(domainId, domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdSubdomainsDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsDeleteUsingDELETECall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/subdomains".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsDeleteUsingDELETEValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdSubdomainsDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsDeleteUsingDELETECall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdSubdomainsDelete
     * Remove all &#x60;Subdomain&#x60;s from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdSubdomainsDeleteUsingDELETE(String domainId) throws ApiException {
        domainsDomainIdSubdomainsDeleteUsingDELETEWithHttpInfo(domainId);
    }

    /**
     * domainsDomainIdSubdomainsDelete
     * Remove all &#x60;Subdomain&#x60;s from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdSubdomainsDeleteUsingDELETEWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsDeleteUsingDELETEValidateBeforeCall(domainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdSubdomainsDelete (asynchronously)
     * Remove all &#x60;Subdomain&#x60;s from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdSubdomainsDeleteUsingDELETEAsync(String domainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsDeleteUsingDELETEValidateBeforeCall(domainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdSubdomainsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsGetUsingGETCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/subdomains".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsGetUsingGETValidateBeforeCall(String domainId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdSubdomainsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsGetUsingGETCall(domainId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdSubdomainsGet
     * Return a list of &#x60;Domain&#x60;s contained in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Domain domainsDomainIdSubdomainsGetUsingGET(String domainId, Double size, String offset) throws ApiException {
        ApiResponse<Domain> resp = domainsDomainIdSubdomainsGetUsingGETWithHttpInfo(domainId, size, offset);
        return resp.getData();
    }

    /**
     * domainsDomainIdSubdomainsGet
     * Return a list of &#x60;Domain&#x60;s contained in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Domain> domainsDomainIdSubdomainsGetUsingGETWithHttpInfo(String domainId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsGetUsingGETValidateBeforeCall(domainId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdSubdomainsGet (asynchronously)
     * Return a list of &#x60;Domain&#x60;s contained in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of domains (optional)
     * @param offset id of the first domain (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdSubdomainsGetUsingGETAsync(String domainId, Double size, String offset, final ApiCallback<Domain> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsGetUsingGETValidateBeforeCall(domainId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETE */
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETECall(String domainId, String subdomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/subdomains/{subdomainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "subdomainId" + "\\}", apiClient.escapeString(subdomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEValidateBeforeCall(String domainId, String subdomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETE(Async)");
        }
        
        // verify the required parameter 'subdomainId' is set
        if (subdomainId == null) {
            throw new ApiException("Missing the required parameter 'subdomainId' when calling domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETECall(domainId, subdomainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdDelete
     * Remove a &#x60;Subdomain&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETE(String domainId, String subdomainId) throws ApiException {
        domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEWithHttpInfo(domainId, subdomainId);
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdDelete
     * Remove a &#x60;Subdomain&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEWithHttpInfo(String domainId, String subdomainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEValidateBeforeCall(domainId, subdomainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdDelete (asynchronously)
     * Remove a &#x60;Subdomain&#x60; from &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEAsync(String domainId, String subdomainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETEValidateBeforeCall(domainId, subdomainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdSubdomainsSubdomainIdPostUsingPOST */
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTCall(String domainId, String subdomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/subdomains/{subdomainId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "subdomainId" + "\\}", apiClient.escapeString(subdomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTValidateBeforeCall(String domainId, String subdomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdSubdomainsSubdomainIdPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'subdomainId' is set
        if (subdomainId == null) {
            throw new ApiException("Missing the required parameter 'subdomainId' when calling domainsDomainIdSubdomainsSubdomainIdPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTCall(domainId, subdomainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdPost
     * Include a &#x60;Domain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdSubdomainsSubdomainIdPostUsingPOST(String domainId, String subdomainId) throws ApiException {
        domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTWithHttpInfo(domainId, subdomainId);
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdPost
     * Include a &#x60;Domain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTWithHttpInfo(String domainId, String subdomainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTValidateBeforeCall(domainId, subdomainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdPost (asynchronously)
     * Include a &#x60;Domain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTAsync(String domainId, String subdomainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTValidateBeforeCall(domainId, subdomainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETCall(String domainId, String subdomainId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/subdomains/{subdomainId}/relations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "subdomainId" + "\\}", apiClient.escapeString(subdomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (resourceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resourceType", resourceType));
        if (relatedId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relatedId", relatedId));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETValidateBeforeCall(String domainId, String subdomainId, String type, String resourceType, String relatedId, Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'subdomainId' is set
        if (subdomainId == null) {
            throw new ApiException("Missing the required parameter 'subdomainId' when calling domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETCall(domainId, subdomainId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Subdomain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related subdomain (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Relation domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET(String domainId, String subdomainId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        ApiResponse<Relation> resp = domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETWithHttpInfo(domainId, subdomainId, type, resourceType, relatedId, size, offset);
        return resp.getData();
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdRelationsGet
     * Return a list of &#x60;Relation&#x60; from &#x60;Subdomain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related subdomain (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Relation> domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETWithHttpInfo(String domainId, String subdomainId, String type, String resourceType, String relatedId, Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETValidateBeforeCall(domainId, subdomainId, type, resourceType, relatedId, size, offset, null, null);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdSubdomainsSubdomainIdRelationsGet (asynchronously)
     * Return a list of &#x60;Relation&#x60; from &#x60;Subdomain&#x60; in &#x60;Domain&#x60;. 
     * @param domainId id of domain (required)
     * @param subdomainId id of subdomain (required)
     * @param type type of relation (required)
     * @param resourceType type of resources (optional)
     * @param relatedId id of related subdomain (optional)
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETAsync(String domainId, String subdomainId, String type, String resourceType, String relatedId, Double size, String offset, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETValidateBeforeCall(domainId, subdomainId, type, resourceType, relatedId, size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdTagsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdTagsGetUsingGETCall(String domainId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/tags".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdTagsGetUsingGETValidateBeforeCall(String domainId, Double size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdTagsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdTagsGetUsingGETCall(domainId, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdTagsGet
     * Return a list of &#x60;Tags&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of tags (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic domainsDomainIdTagsGetUsingGET(String domainId, Double size) throws ApiException {
        ApiResponse<Topic> resp = domainsDomainIdTagsGetUsingGETWithHttpInfo(domainId, size);
        return resp.getData();
    }

    /**
     * domainsDomainIdTagsGet
     * Return a list of &#x60;Tags&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of tags (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> domainsDomainIdTagsGetUsingGETWithHttpInfo(String domainId, Double size) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdTagsGetUsingGETValidateBeforeCall(domainId, size, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdTagsGet (asynchronously)
     * Return a list of &#x60;Tags&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of tags (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdTagsGetUsingGETAsync(String domainId, Double size, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdTagsGetUsingGETValidateBeforeCall(domainId, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdTextsPostUsingPOST */
    private com.squareup.okhttp.Call domainsDomainIdTextsPostUsingPOSTCall(String domainId, Text text, Integer size, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = text;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/texts".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        if (size != null)
            localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdTextsPostUsingPOSTValidateBeforeCall(String domainId, Text text, Integer size, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdTextsPostUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling domainsDomainIdTextsPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdTextsPostUsingPOSTCall(domainId, text, size, type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdTextsPost
     * Return a list of similar &#x60;Document&#x60;s in &#x60;Domain&#x60; to the given text. 
     * @param domainId identifier (required)
     * @param text a paragraph (required)
     * @param type type of resources (optional)
     * @return Relation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Relation> domainsDomainIdTextsPostUsingPOST(String domainId, Text text, Integer size, String type) throws ApiException {
        ApiResponse<List<Relation>> resp = domainsDomainIdTextsPostUsingPOSTWithHttpInfo(domainId, text, size, type);
        return resp.getData();
    }

    /**
     * domainsDomainIdTextsPost
     * Return a list of similar &#x60;Document&#x60;s in &#x60;Domain&#x60; to the given text. 
     * @param domainId identifier (required)
     * @param text a paragraph (required)
     * @param type type of resources (optional)
     * @return ApiResponse&lt;Relation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Relation>> domainsDomainIdTextsPostUsingPOSTWithHttpInfo(String domainId, Text text, Integer size, String type) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdTextsPostUsingPOSTValidateBeforeCall(domainId, text, size, type, null, null);
        Type localVarReturnType = new TypeToken<List<Relation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdTextsPost (asynchronously)
     * Return a list of similar &#x60;Document&#x60;s in &#x60;Domain&#x60; to the given text. 
     * @param domainId identifier (required)
     * @param text a paragraph (required)
     * @param type type of resources (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdTextsPostUsingPOSTAsync(String domainId, Text text, Integer size, String type, final ApiCallback<Relation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdTextsPostUsingPOSTValidateBeforeCall(domainId, text, size, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Relation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdTopicsGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdTopicsGetUsingGETCall(String domainId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/topics".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (words != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "words", words));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdTopicsGetUsingGETValidateBeforeCall(String domainId, Double size, String offset, Double words, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdTopicsGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdTopicsGetUsingGETCall(domainId, size, offset, words, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param words words per topic (optional, default to 10)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic domainsDomainIdTopicsGetUsingGET(String domainId, Double size, String offset, Double words) throws ApiException {
        ApiResponse<Topic> resp = domainsDomainIdTopicsGetUsingGETWithHttpInfo(domainId, size, offset, words);
        return resp.getData();
    }

    /**
     * domainsDomainIdTopicsGet
     * Return a list of &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param words words per topic (optional, default to 10)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> domainsDomainIdTopicsGetUsingGETWithHttpInfo(String domainId, Double size, String offset, Double words) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdTopicsGetUsingGETValidateBeforeCall(domainId, size, offset, words, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdTopicsGet (asynchronously)
     * Return a list of &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param size number of topics (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param words words per topic (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdTopicsGetUsingGETAsync(String domainId, Double size, String offset, Double words, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdTopicsGetUsingGETValidateBeforeCall(domainId, size, offset, words, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsDomainIdTopicsPutUsingPUT */
    private com.squareup.okhttp.Call domainsDomainIdTopicsPutUsingPUTCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/topics".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdTopicsPutUsingPUTValidateBeforeCall(String domainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdTopicsPutUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdTopicsPutUsingPUTCall(domainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdTopicsPut
     * Create a new Topic Model in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void domainsDomainIdTopicsPutUsingPUT(String domainId) throws ApiException {
        domainsDomainIdTopicsPutUsingPUTWithHttpInfo(domainId);
    }

    /**
     * domainsDomainIdTopicsPut
     * Create a new Topic Model in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> domainsDomainIdTopicsPutUsingPUTWithHttpInfo(String domainId) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdTopicsPutUsingPUTValidateBeforeCall(domainId, null, null);
        return apiClient.execute(call);
    }

    /**
     * domainsDomainIdTopicsPut (asynchronously)
     * Create a new Topic Model in &#x60;Domain&#x60;. 
     * @param domainId identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdTopicsPutUsingPUTAsync(String domainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdTopicsPutUsingPUTValidateBeforeCall(domainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for domainsDomainIdTopicsTopicIdGetUsingGET */
    private com.squareup.okhttp.Call domainsDomainIdTopicsTopicIdGetUsingGETCall(String domainId, String topicId, Double size, Double score, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains/{domainId}/topics/{topicId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "domainId" + "\\}", apiClient.escapeString(domainId.toString()))
        .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (score != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "score", score));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsDomainIdTopicsTopicIdGetUsingGETValidateBeforeCall(String domainId, String topicId, Double size, Double score, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling domainsDomainIdTopicsTopicIdGetUsingGET(Async)");
        }
        
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling domainsDomainIdTopicsTopicIdGetUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsDomainIdTopicsTopicIdGetUsingGETCall(domainId, topicId, size, score, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsDomainIdTopicsTopicIdGet
     * Return a &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId domain identifier (required)
     * @param topicId topic identifier (required)
     * @param size number of words (optional, default to 25)
     * @param score min score (optional)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topic domainsDomainIdTopicsTopicIdGetUsingGET(String domainId, String topicId, Double size, Double score) throws ApiException {
        ApiResponse<Topic> resp = domainsDomainIdTopicsTopicIdGetUsingGETWithHttpInfo(domainId, topicId, size, score);
        return resp.getData();
    }

    /**
     * domainsDomainIdTopicsTopicIdGet
     * Return a &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId domain identifier (required)
     * @param topicId topic identifier (required)
     * @param size number of words (optional, default to 25)
     * @param score min score (optional)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topic> domainsDomainIdTopicsTopicIdGetUsingGETWithHttpInfo(String domainId, String topicId, Double size, Double score) throws ApiException {
        com.squareup.okhttp.Call call = domainsDomainIdTopicsTopicIdGetUsingGETValidateBeforeCall(domainId, topicId, size, score, null, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsDomainIdTopicsTopicIdGet (asynchronously)
     * Return a &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     * @param domainId domain identifier (required)
     * @param topicId topic identifier (required)
     * @param size number of words (optional, default to 25)
     * @param score min score (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsDomainIdTopicsTopicIdGetUsingGETAsync(String domainId, String topicId, Double size, Double score, final ApiCallback<Topic> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsDomainIdTopicsTopicIdGetUsingGETValidateBeforeCall(domainId, topicId, size, score, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsGetUsingGET */
    private com.squareup.okhttp.Call domainsGetUsingGETCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/domains".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsGetUsingGETValidateBeforeCall(Double size, String offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = domainsGetUsingGETCall(size, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsGet
     * Gets a list of &#x60;Domains&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsGetUsingGET(Double size, String offset) throws ApiException {
        ApiResponse<Reference> resp = domainsGetUsingGETWithHttpInfo(size, offset);
        return resp.getData();
    }

    /**
     * domainsGet
     * Gets a list of &#x60;Domains&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsGetUsingGETWithHttpInfo(Double size, String offset) throws ApiException {
        com.squareup.okhttp.Call call = domainsGetUsingGETValidateBeforeCall(size, offset, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsGet (asynchronously)
     * Gets a list of &#x60;Domains&#x60;. 
     * @param size number of resources (optional, default to 100)
     * @param offset id of the first element (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsGetUsingGETAsync(Double size, String offset, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsGetUsingGETValidateBeforeCall(size, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for domainsPostUsingPOST */
    private com.squareup.okhttp.Call domainsPostUsingPOSTCall(Resource domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = domain;
        
        // create path and map variables
        String localVarPath = "/domains".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call domainsPostUsingPOSTValidateBeforeCall(Resource domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling domainsPostUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = domainsPostUsingPOSTCall(domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * domainsPost
     * Create a new &#x60;Domain&#x60;. 
     * @param domain a container of documents (required)
     * @return Reference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Reference domainsPostUsingPOST(Resource domain) throws ApiException {
        ApiResponse<Reference> resp = domainsPostUsingPOSTWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * domainsPost
     * Create a new &#x60;Domain&#x60;. 
     * @param domain a container of documents (required)
     * @return ApiResponse&lt;Reference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Reference> domainsPostUsingPOSTWithHttpInfo(Resource domain) throws ApiException {
        com.squareup.okhttp.Call call = domainsPostUsingPOSTValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * domainsPost (asynchronously)
     * Create a new &#x60;Domain&#x60;. 
     * @param domain a container of documents (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call domainsPostUsingPOSTAsync(Resource domain, final ApiCallback<Reference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = domainsPostUsingPOSTValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Reference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
