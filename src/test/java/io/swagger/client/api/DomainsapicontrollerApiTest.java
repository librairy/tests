/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ContainerStats;
import io.swagger.client.model.Domain;
import io.swagger.client.model.Parameter;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Relation;
import io.swagger.client.model.Resource;
import io.swagger.client.model.Score;
import io.swagger.client.model.Tag;
import io.swagger.client.model.Text;
import io.swagger.client.model.Topic;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainsapicontrollerApi
 */
@Ignore
public class DomainsapicontrollerApiTest {

    private final DomainsapicontrollerApi api = new DomainsapicontrollerApi();

    
    /**
     * domainsDelete
     *
     * Remove all &#x60;Domain&#x60;s. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDeleteUsingDELETETest() throws ApiException {
        api.domainsDeleteUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDelete
     *
     * Remove a &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDeleteUsingDELETETest() throws ApiException {
        String domainId = null;
        api.domainsDomainIdDeleteUsingDELETE(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDelete
     *
     * Remove all &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDeleteUsingDELETETest() throws ApiException {
        String domainId = null;
        api.domainsDomainIdDocumentsDeleteUsingDELETE(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDocumentIdDelete
     *
     * Remove a &#x60;Document&#x60; from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDocumentIdDeleteUsingDELETETest() throws ApiException {
        String domainId = null;
        String documentId = null;
        api.domainsDomainIdDocumentsDocumentIdDeleteUsingDELETE(domainId, documentId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDocumentIdPost
     *
     * Add a &#x60;Document&#x60; to &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDocumentIdPostUsingPOSTTest() throws ApiException {
        String domainId = null;
        String documentId = null;
        api.domainsDomainIdDocumentsDocumentIdPostUsingPOST(domainId, documentId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDocumentIdRelationsGet
     *
     * Return a list of &#x60;Relation&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDocumentIdRelationsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String documentId = null;
        String type = null;
        String resourceType = null;
        String relatedId = null;
        Double size = null;
        String offset = null;
        List<Relation> response = api.domainsDomainIdDocumentsDocumentIdRelationsGetUsingGET(domainId, documentId, type, resourceType, relatedId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDocumentIdTagsGet
     *
     * Return a list of &#x60;Tag&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDocumentIdTagsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String documentId = null;
        Double size = null;
        Tag response = api.domainsDomainIdDocumentsDocumentIdTagsGetUsingGET(domainId, documentId, size);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsDocumentIdTopicsGet
     *
     * Return a list of &#x60;Topic&#x60; from &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsDocumentIdTopicsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String documentId = null;
        Double size = null;
        String offset = null;
        Double words = null;
        Topic response = api.domainsDomainIdDocumentsDocumentIdTopicsGetUsingGET(domainId, documentId, size, offset, words);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdDocumentsGet
     *
     * Return a list of &#x60;Document&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdDocumentsGetUsingGETTest() throws ApiException {
        String domainId = null;
        Double size = null;
        String offset = null;
        Reference response = api.domainsDomainIdDocumentsGetUsingGET(domainId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdGet
     *
     * Return a &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdGetUsingGETTest() throws ApiException {
        String domainId = null;
        ContainerStats response = api.domainsDomainIdGetUsingGET(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdParametersGet
     *
     * Return a list of &#x60;Parameter&#x60;s in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdParametersGetUsingGETTest() throws ApiException {
        String domainId = null;
        Parameter response = api.domainsDomainIdParametersGetUsingGET(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdParametersPost
     *
     * Add a &#x60;Parameter&#x60; to &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdParametersPostUsingPOSTTest() throws ApiException {
        String domainId = null;
        Parameter parameter = null;
        api.domainsDomainIdParametersPostUsingPOST(domainId, parameter);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPartsGet
     *
     * Return a list of &#x60;Part&#x60;s in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPartsGetUsingGETTest() throws ApiException {
        String domainId = null;
        Double size = null;
        String offset = null;
        Reference response = api.domainsDomainIdPartsGetUsingGET(domainId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPartsPartIdRelationsGet
     *
     * Return a list of &#x60;Relation&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPartsPartIdRelationsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String partId = null;
        String type = null;
        String resourceType = null;
        String relatedId = null;
        Double size = null;
        String offset = null;
        Relation response = api.domainsDomainIdPartsPartIdRelationsGetUsingGET(domainId, partId, type, resourceType, relatedId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPartsPartIdTagsGet
     *
     * Return a list of &#x60;Tag&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPartsPartIdTagsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String partId = null;
        Double size = null;
        Tag response = api.domainsDomainIdPartsPartIdTagsGetUsingGET(domainId, partId, size);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPartsPartIdTopicsGet
     *
     * Return a list of &#x60;Topic&#x60; from &#x60;Part&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPartsPartIdTopicsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String partId = null;
        Double size = null;
        String offset = null;
        Double words = null;
        Topic response = api.domainsDomainIdPartsPartIdTopicsGetUsingGET(domainId, partId, size, offset, words);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPathsGet
     *
     * Return a path of &#x60;Document&#x60;s in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPathsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String startId = null;
        String endId = null;
        String type = null;
        Double lenght = null;
        Double threshold = null;
        Double size = null;
        String resources = null;
        Reference response = api.domainsDomainIdPathsGetUsingGET(domainId, startId, endId, type, lenght, threshold, size, resources);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdPost
     *
     * Create a new &#x60;Domain&#x60; by id 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdPostUsingPOSTTest() throws ApiException {
        String domainId = null;
        Resource domain = null;
        Reference response = api.domainsDomainIdPostUsingPOST(domainId, domain);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdSubdomainsDelete
     *
     * Remove all &#x60;Subdomain&#x60;s from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdSubdomainsDeleteUsingDELETETest() throws ApiException {
        String domainId = null;
        api.domainsDomainIdSubdomainsDeleteUsingDELETE(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdSubdomainsGet
     *
     * Return a list of &#x60;Domain&#x60;s contained in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdSubdomainsGetUsingGETTest() throws ApiException {
        String domainId = null;
        Double size = null;
        String offset = null;
        Domain response = api.domainsDomainIdSubdomainsGetUsingGET(domainId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdSubdomainsSubdomainIdDelete
     *
     * Remove a &#x60;Subdomain&#x60; from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETETest() throws ApiException {
        String domainId = null;
        String subdomainId = null;
        api.domainsDomainIdSubdomainsSubdomainIdDeleteUsingDELETE(domainId, subdomainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdSubdomainsSubdomainIdPost
     *
     * Include a &#x60;Domain&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdSubdomainsSubdomainIdPostUsingPOSTTest() throws ApiException {
        String domainId = null;
        String subdomainId = null;
        api.domainsDomainIdSubdomainsSubdomainIdPostUsingPOST(domainId, subdomainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdSubdomainsSubdomainIdRelationsGet
     *
     * Return a list of &#x60;Relation&#x60; from &#x60;Subdomain&#x60; in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGETTest() throws ApiException {
        String domainId = null;
        String subdomainId = null;
        String type = null;
        String resourceType = null;
        String relatedId = null;
        Double size = null;
        String offset = null;
        Relation response = api.domainsDomainIdSubdomainsSubdomainIdRelationsGetUsingGET(domainId, subdomainId, type, resourceType, relatedId, size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdTagsGet
     *
     * Return a list of &#x60;Tags&#x60; from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdTagsGetUsingGETTest() throws ApiException {
        String domainId = null;
        Double size = null;
        Topic response = api.domainsDomainIdTagsGetUsingGET(domainId, size);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdTextsPost
     *
     * Return a list of similar &#x60;Document&#x60;s in &#x60;Domain&#x60; to the given text. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdTextsPostUsingPOSTTest() throws ApiException {
        String domainId = null;
        Text text = null;
        String type = null;
        Integer size = null;
        List<Relation> response = api.domainsDomainIdTextsPostUsingPOST(domainId, text, size, type);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdTopicsGet
     *
     * Return a list of &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdTopicsGetUsingGETTest() throws ApiException {
        String domainId = null;
        Double size = null;
        String offset = null;
        Double words = null;
        Topic response = api.domainsDomainIdTopicsGetUsingGET(domainId, size, offset, words);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdTopicsPut
     *
     * Create a new Topic Model in &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdTopicsPutUsingPUTTest() throws ApiException {
        String domainId = null;
        api.domainsDomainIdTopicsPutUsingPUT(domainId);

        // TODO: test validations
    }
    
    /**
     * domainsDomainIdTopicsTopicIdGet
     *
     * Return a &#x60;Topic&#x60; from &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsDomainIdTopicsTopicIdGetUsingGETTest() throws ApiException {
        String domainId = null;
        String topicId = null;
        Double size = null;
        Double score = null;
        Topic response = api.domainsDomainIdTopicsTopicIdGetUsingGET(domainId, topicId, size, score);

        // TODO: test validations
    }
    
    /**
     * domainsGet
     *
     * Gets a list of &#x60;Domains&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsGetUsingGETTest() throws ApiException {
        Double size = null;
        String offset = null;
        Reference response = api.domainsGetUsingGET(size, offset);

        // TODO: test validations
    }
    
    /**
     * domainsPost
     *
     * Create a new &#x60;Domain&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void domainsPostUsingPOSTTest() throws ApiException {
        Resource domain = null;
        Reference response = api.domainsPostUsingPOST(domain);

        // TODO: test validations
    }
    
}
