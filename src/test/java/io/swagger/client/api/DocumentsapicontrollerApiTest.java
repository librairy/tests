/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Annotation;
import io.swagger.client.model.DigitalObject;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Text;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsapicontrollerApi
 */
@Ignore
public class DocumentsapicontrollerApiTest {

    private final DocumentsapicontrollerApi api = new DocumentsapicontrollerApi();

    
    /**
     * documentsDelete
     *
     * Remove all existing &#x60;Document&#x60;s. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsDeleteUsingDELETETest() throws ApiException {
        api.documentsDeleteUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * documentsGet
     *
     * Returns a list of &#x60;Documents&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsGetUsingGETTest() throws ApiException {
        Double size = null;
        String offset = null;
        List<Reference> response = api.documentsGetUsingGET(size, offset);

        // TODO: test validations
    }
    
    /**
     * documentsIdAnnotationsAidDelete
     *
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdAnnotationsAidDeleteUsingDELETETest() throws ApiException {
        String id = null;
        String aid = null;
        api.documentsIdAnnotationsAidDeleteUsingDELETE(id, aid);

        // TODO: test validations
    }
    
    /**
     * documentsIdAnnotationsAidGet
     *
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdAnnotationsAidGetUsingGETTest() throws ApiException {
        String id = null;
        String aid = null;
        Annotation response = api.documentsIdAnnotationsAidGetUsingGET(id, aid);

        // TODO: test validations
    }
    
    /**
     * documentsIdAnnotationsAidPost
     *
     * Create a new &#x60;Annotation&#x60; for &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdAnnotationsAidPostUsingPOSTTest() throws ApiException {
        String id = null;
        String aid = null;
        Annotation annotation = null;
        Reference response = api.documentsIdAnnotationsAidPostUsingPOST(id, aid, annotation);

        // TODO: test validations
    }
    
    /**
     * documentsIdAnnotationsDelete
     *
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdAnnotationsDeleteUsingDELETETest() throws ApiException {
        String id = null;
        api.documentsIdAnnotationsDeleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * documentsIdAnnotationsGet
     *
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdAnnotationsGetUsingGETTest() throws ApiException {
        String id = null;
        List<String> response = api.documentsIdAnnotationsGetUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * documentsIdDelete
     *
     * Remove an existing &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdDeleteUsingDELETETest() throws ApiException {
        String id = null;
        api.documentsIdDeleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * documentsIdDomainsGet
     *
     * Returns the list of &#x60;Domain&#x60;s where the&#x60;Document&#x60; is contained. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdDomainsGetUsingGETTest() throws ApiException {
        String id = null;
        Double size = null;
        String offset = null;
        Reference response = api.documentsIdDomainsGetUsingGET(id, size, offset);

        // TODO: test validations
    }
    
    /**
     * documentsIdGet
     *
     * Returns a single &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdGetUsingGETTest() throws ApiException {
        String id = null;
        Boolean content = null;
        DigitalObject response = api.documentsIdGetUsingGET(id, content);

        // TODO: test validations
    }
    
    /**
     * documentsIdPartsDelete
     *
     * Remove all &#x60;Part&#x60;s of &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdPartsDeleteUsingDELETETest() throws ApiException {
        String id = null;
        api.documentsIdPartsDeleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * documentsIdPartsGet
     *
     * Returns the list of &#x60;Part&#x60;s contained in the&#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdPartsGetUsingGETTest() throws ApiException {
        String id = null;
        Double size = null;
        String offset = null;
        List<Reference> response = api.documentsIdPartsGetUsingGET(id, size, offset);

        // TODO: test validations
    }
    
    /**
     * documentsIdPartsIdPost
     *
     * Add a &#x60;Part&#x60; in a &#x60;Document&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdPartsIdPostUsingPOSTTest() throws ApiException {
        String id = null;
        String partId = null;
        Reference response = api.documentsIdPartsIdPostUsingPOST(id, partId);

        // TODO: test validations
    }
    
    /**
     * documentsIdPost
     *
     * Create a new &#x60;Document&#x60; by id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsIdPostUsingPOSTTest() throws ApiException {
        String id = null;
        Text document = null;
        Reference response = api.documentsIdPostUsingPOST(id, document);

        // TODO: test validations
    }
    
    /**
     * documentsPost
     *
     * Create a new &#x60;Document&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void documentsPostUsingPOSTTest() throws ApiException {
        Text document = null;
        Reference response = api.documentsPostUsingPOST(document);

        // TODO: test validations
    }
    
}
