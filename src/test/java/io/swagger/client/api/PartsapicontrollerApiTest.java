/*
 * librAIry API
 * Learn about [librAIry](http://librairy.github.io/) or follow the account `@librairy_fw` on twitter.     This research project receives funding from the European Commission's Seventh Framework Programme.Activity ICT (FP7-ICT-2013.8.1)  Grant agreement no: 611383 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: librairy.framework@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Annotation;
import io.swagger.client.model.DigitalObject;
import io.swagger.client.model.Reference;
import io.swagger.client.model.Text;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PartsapicontrollerApi
 */
@Ignore
public class PartsapicontrollerApiTest {

    private final PartsapicontrollerApi api = new PartsapicontrollerApi();

    
    /**
     * partsDelete
     *
     * Remove all existing &#x60;Part&#x60;s. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsDeleteUsingDELETETest() throws ApiException {
        api.partsDeleteUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * partsGet
     *
     * Returns a list of &#x60;Parts&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsGetUsingGETTest() throws ApiException {
        Double size = null;
        String offset = null;
        List<Reference> response = api.partsGetUsingGET(size, offset);

        // TODO: test validations
    }
    
    /**
     * partsIdAnnotationsAidDelete
     *
     * Remove the &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdAnnotationsAidDeleteUsingDELETETest() throws ApiException {
        String id = null;
        String aid = null;
        api.partsIdAnnotationsAidDeleteUsingDELETE(id, aid);

        // TODO: test validations
    }
    
    /**
     * partsIdAnnotationsAidGet
     *
     * Returns the &#x60;Annotation&#x60; content for the&#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdAnnotationsAidGetUsingGETTest() throws ApiException {
        String id = null;
        String aid = null;
        Annotation response = api.partsIdAnnotationsAidGetUsingGET(id, aid);

        // TODO: test validations
    }
    
    /**
     * partsIdAnnotationsAidPost
     *
     * Create a new &#x60;Annotation&#x60; for &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdAnnotationsAidPostUsingPOSTTest() throws ApiException {
        String id = null;
        String aid = null;
        Annotation annotation = null;
        Reference response = api.partsIdAnnotationsAidPostUsingPOST(id, aid, annotation);

        // TODO: test validations
    }
    
    /**
     * partsIdAnnotationsDelete
     *
     * Remove all &#x60;Annotations&#x60;s of a &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdAnnotationsDeleteUsingDELETETest() throws ApiException {
        String id = null;
        api.partsIdAnnotationsDeleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * partsIdAnnotationsGet
     *
     * Returns the list of &#x60;Annotation&#x60;s for the&#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdAnnotationsGetUsingGETTest() throws ApiException {
        String id = null;
        List<String> response = api.partsIdAnnotationsGetUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * partsIdDelete
     *
     * Remove an existing &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdDeleteUsingDELETETest() throws ApiException {
        String id = null;
        api.partsIdDeleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * partsIdDocumentsGet
     *
     * Returns the list of &#x60;Document&#x60;s where the &#x60;Part&#x60; is contained. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdDocumentsGetUsingGETTest() throws ApiException {
        String id = null;
        Double size = null;
        String offset = null;
        Reference response = api.partsIdDocumentsGetUsingGET(id, size, offset);

        // TODO: test validations
    }
    
    /**
     * partsIdDomainsGet
     *
     * Returns the list of &#x60;Domain&#x60;s where the &#x60;Part&#x60; is contained. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdDomainsGetUsingGETTest() throws ApiException {
        String id = null;
        Double size = null;
        String offset = null;
        Reference response = api.partsIdDomainsGetUsingGET(id, size, offset);

        // TODO: test validations
    }
    
    /**
     * partsIdGet
     *
     * Returns a single &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdGetUsingGETTest() throws ApiException {
        String id = null;
        Boolean content = null;
        DigitalObject response = api.partsIdGetUsingGET(id, content);

        // TODO: test validations
    }
    
    /**
     * partsIdPost
     *
     * Create a new &#x60;Part&#x60; by id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsIdPostUsingPOSTTest() throws ApiException {
        String id = null;
        Text text = null;
        Reference response = api.partsIdPostUsingPOST(id, text);

        // TODO: test validations
    }
    
    /**
     * partsPost
     *
     * Create a new &#x60;Part&#x60;. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partsPostUsingPOSTTest() throws ApiException {
        Text text = null;
        Reference response = api.partsPostUsingPOST(text);

        // TODO: test validations
    }
    
}
